if(!$this->errorConsole) {
            return;
        }

        // if error has been suppressed with @
        if (error_reporting() == 0) {
            return;
        }

        if($this->errorHistory[$errno . ':' . $errstr . ':' . $errfile . ':' . $errline]) {
            // a repeated error
            return;
        }

        // we ignore the error if we should based on error_reporting() and the client is not forcing all errors to show
        if (in_array($errno, $this->_errorReportingInfo['absentBits']) && !$this->_conditionalErrorConsole->is(true)) {
            return;
        }

        // if the client is forcing all error to show see if this error is excluded
        if ($this->_conditionalErrorConsole->is(true) && $this->_conditionalErrorConsole->on($this->_errorReportingInfo['bitToStr'][$errno])->is(true)) {
            return;
        }

        // log error if applicable
        if(ini_get('log_errors') && ini_get('error_log')) {
            $file = ini_get('error_log');
            if(file_exists($file)) {
                if($handle = fopen($file, 'a')) {
                    $line = array();
                    $line[] = '[' . date('Y-m-d H:i:s') . ']';
                    $line[] = 'PHP ' . $this->errorLabelForNumber($errno) . ':';
                    $line[] = $errstr;
                    $line[] = 'in';
                    $line[] = $errfile;
                    $line[] = 'on line';
                    $line[] = $errline;
                    fwrite($handle, implode(' ', $line) . "\n");
                    fclose($handle);
                }
            }
        }

        $this->errorHistory[$errno . ':' . $errstr . ':' . $errfile . ':' . $errline] = true;

        // ignore assertion errors
        if(substr($errstr, 0, 8)=='assert()' && preg_match_all('/^assert\(\) \[<a href=\'function.assert\'>function.assert<\/a>\]: Assertion (.*) failed$/si', $errstr, $m)) {
            return;
        }

        // Only log errors we are asking for
        if ($this->errorTypes & $errno) {
            $this->errorConsole->setTemporaryTraceOffset($this->traceOffset);

            $meta = array(
                'encoder.rootDepth' => 5,
                'encoder.exception.traceOffset' => 1
            );

            // TODO: Custom renderers for specific errors
            if(substr($errstr, 0, 16) == 'Undefined index:' ||
               substr($errstr, 0, 17) == 'Undefined offset:' ||
               substr($errstr, 0, 19) == 'Undefined variable:' ||
               substr($errstr, 0, 25) == 'Use of undefined constant' ||
               $errstr == 'Trying to get property of non-object' ||
               $errstr == 'Only variable references should be returned by reference'
            ) {
                $meta['encoder.exception.traceMaxLength'] = 1;
            } else
            if(substr($errstr, 0, 8) == 'Function' && substr($errstr, -13, 13) == 'is deprecated') {
                $meta['encoder.exception.traceMaxLength'] = 2;
            }

            $this->errorConsole->meta($meta)->error(new ErrorException($this->_errorReportingInfo['bitToStr'][$errno] . ' - ' . $errstr, 0, $errno, $errfile, $errline));
        }